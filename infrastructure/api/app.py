import logging
import os
from datetime import datetime, timedelta

import requests
from flask import Flask, request, jsonify
from flask_babel import Babel, lazy_gettext as _l
from werkzeug.http import HTTP_STATUS_CODES

from infrastructure.database.models.base import db
from infrastructure.database.repo.reciklomat import ReciklomatRepo
from infrastructure.database.repo.reciklomat_change_history import ReciklomatChangeHistoryRepo
from infrastructure.database.repo.reciklomat_subscription import ReciklomatSubscriptionRepo
from infrastructure.database.repo.users import UserRepo

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
                    handlers=[logging.StreamHandler()])  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL',
                                                  'mysql+pymysql://reciklomat_adm:25HE3V2DXE6defwx3GS66N@reciklomat_mysql:3306/reciklomat')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.init_app(app)
babel = Babel(app)


# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
reciklomat_repo = ReciklomatRepo(db.session)
user_repo = UserRepo(db.session)
subscription_repo = ReciklomatSubscriptionRepo(db.session)
history_repo = ReciklomatChangeHistoryRepo(db.session)


def get_locale():
    data = request.get_json() or request.form

    if 'telegram_id' in data:
        user = user_repo.get_by_telegram_id(data['telegram_id'])
        if user and user.language:
            return user.language

    return 'sr'


# @babel.locale_selector_func
# def get_locale():
#     # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
#     data = request.get_json() or request.form
#
#     if 'telegram_id' in data:
#         user = user_repo.get_by_telegram_id(data['telegram_id'])
#         if user and user.language:
#             return user.language  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#
#     # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru')
#     return 'ru'


statuses = {"u prekidu": "–ù–∞ –ø–∞—É–∑–µ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", "popunjen": "–ó–∞–ø–æ–ª–Ω–µ–Ω", "u radu": "–†–∞–±–æ—Ç–∞–µ—Ç",
            "artikal zaglavljen": "–ß—Ç–æ-—Ç–æ –∑–∞—Å—Ç—Ä—è–ª–æ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", "u not working": "–í—ã–∫–ª—é—á–µ–Ω",
            'servisiranje': '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏'}

statuses_markers = {"–ù–∞ –ø–∞—É–∑–µ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)": "üü†", "–ó–∞–ø–æ–ª–Ω–µ–Ω": "üü†", "–ß—Ç–æ-—Ç–æ –∑–∞—Å—Ç—Ä—è–ª–æ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)": "üü†",
                    '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏': "üü†", "–†–∞–±–æ—Ç–∞–µ—Ç": "üü¢", "–í—ã–∫–ª—é—á–µ–Ω": "üî¥"}

statuses_markers_translated = {"–ù–∞ –ø–∞—É–∑–µ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)": _l("–ù–∞ –ø–∞—É–∑–µ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"), "–ó–∞–ø–æ–ª–Ω–µ–Ω": _l("–ó–∞–ø–æ–ª–Ω–µ–Ω"),
                               "–ß—Ç–æ-—Ç–æ –∑–∞—Å—Ç—Ä—è–ª–æ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)": _l("–ß—Ç–æ-—Ç–æ –∑–∞—Å—Ç—Ä—è–ª–æ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"),
                               "–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏": _l("–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"), "–†–∞–±–æ—Ç–∞–µ—Ç": _l("–†–∞–±–æ—Ç–∞–µ—Ç"),
                               "–í—ã–∫–ª—é—á–µ–Ω": _l("–í—ã–∫–ª—é—á–µ–Ω")}


# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def bad_request(message):
    return error_response(400, message)


def not_found(message):
    return error_response(404, message)


def error_response(status_code, message=None):
    payload = {'errorStatus': HTTP_STATUS_CODES.get(status_code, 'Unknown error'), 'errorCode': "1",
               'errorMessage': str(message), }
    response = jsonify(payload)
    response.status_code = status_code
    return response


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤
@app.route('/update-data', methods=['GET'])
def reciklomat_update_data():
    url = 'http://65.21.206.110:8081/RecikliranjeWebApp/GetWebAdditionalData1?_=1704367291000'
    r = requests.get(url)
    data = r.json()

    for item in data['_reciklomati']:
        current_reciklomat = reciklomat_repo.get_by_address(item['_adresa_prodajnog_mesta'])
        if current_reciklomat:
            check_if_status_changes(current_reciklomat, item)
            reciklomat_repo.update_status_by_address(address=item['_adresa_prodajnog_mesta'],
                                                     status=item['_status_prodajnog_mesta'],
                                                     occupancy=int(item['_broj_artikala']),
                                                     capacity=int(item['_max_broj_artikala']),
                                                     last_check=datetime.utcnow() + timedelta(hours=3))
        else:
            new_reciklomat = reciklomat_repo.add_new_reciklomat(address=item['_adresa_prodajnog_mesta'],
                                                                status=item['_status_prodajnog_mesta'],
                                                                occupancy=int(item['_broj_artikala']),
                                                                capacity=int(item['_max_broj_artikala']),
                                                                lat=item['_latitude'], lon=item['_longitude'],
                                                                city=item['_mesto'],
                                                                district=item['_naziv_prodajnog_mesta'])
    return 'ok'


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
def check_if_status_changes(current_reciklomat, new_reciklomat_data):
    new_status = new_reciklomat_data['_status_prodajnog_mesta']
    if current_reciklomat.status != new_status:
        history_repo.write_status_change(current_reciklomat.id, current_reciklomat.status, new_status)
        if new_status == "–†–∞–±–æ—Ç–∞–µ—Ç":
            send_notifications_to_subscribers(new_reciklomat_data)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
def send_notifications_to_subscribers(new_reciklomat):
    subscribers = subscription_repo.get_by_address(new_reciklomat['_adresa_prodajnog_mesta'])
    for subscriber in subscribers:
        current_subscriber = user_repo.get_by_id(subscriber.user_id)
        if current_subscriber.is_telegram_on:
            send_message_to_telegram(new_reciklomat, current_subscriber)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_message_to_telegram(new_reciklomat, subscriber):
    url_tg = 'https://api.telegram.org/bot<YOUR_BOT_TOKEN>/sendMessage'

    message_text = f'<b>{new_reciklomat["_adresa_prodajnog_mesta"]}</b>\n' \
                   f'–ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {new_reciklomat["_broj_artikala"]} –∏–∑ {new_reciklomat["_max_broj_artikala"]}\n' \
                   f'–û—Å—Ç–∞–ª–æ—Å—å: {int(new_reciklomat["_max_broj_artikala"]) - int(new_reciklomat["_broj_artikala"])}\n'

    message_data = {'chat_id': subscriber.telegram_id, 'text': message_text, 'parse_mode': 'HTML'}

    requests.post(url_tg, data=message_data)


@app.route('/user/wishlist', methods=['POST'])
def user_wishlist():
    data = request.get_json() or request.form
    current_usr = user_repo.get_by_telegram_id(data['telegram_id'])

    if not current_usr:
        return not_found(_l('–ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ—Ç—É, —á—Ç–æ–±—ã –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª –≤–∞—Å'))

    record_a_visit(current_usr)
    # login_user(current_usr, True)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    reciklomats_list = reciklomat_repo.to_collection_reciklomats(1, 999, current_usr)

    text_data = _l(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤:\n\n‚úÖ - —É–∂–µ –≤ –≤–∞—à–µ–º –≤–∏—à–ª–∏—Å—Ç–µ\n‚õî - –Ω–µ—Ç –≤ –≤–∞—à–µ–º –≤–∏—à–ª–∏—Å—Ç–µ\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞")

    di = {'items': reciklomats_list, 'text': text_data}

    return jsonify({'result': di})


@app.route('/check', methods=['POST'])
def check():
    payload = request.get_json() or request.form

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    current_usr = user_repo.get_by_telegram_id(payload['telegram_id'])
    if not current_usr:
        return not_found(_l("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ!"))

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è
    record_a_visit(current_usr)
    # login_user(current_usr, True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if subscription_repo.get_by_user_id(current_usr.id) or payload['howMany'] == "all":
        reciklomats_list = []

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        all_reciklomats = reciklomat_repo.get_all_sorted_by_status_and_occupancy()

        for item in all_reciklomats:
            checker = False

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤—Å–µ —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ
            if payload['howMany'] == "all":
                checker = True
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç
                if subscription_repo.check_user_subscription(current_usr.id, item.address):
                    checker = True

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if checker:
                if item.lat == 0 or item.lon == 0:
                    link = f"https://www.google.ru/maps/place/{item.address}"
                else:
                    link = f"https://www.google.ru/maps/place/{item.lat},{item.lon}"

                a1 = _l("–°—Ç–∞—Ç—É—Å —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–∞:")
                a2 = _l("–ó–∞–ø–æ–ª–Ω–µ–Ω–æ:")
                a3 = _l("–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç–∞:")
                a4 = _l("–∏–∑")

                build_result = f"<a href='{link}'>{statuses_markers[item.status]} {item.address}</a>\n" \
                               f"{a1} {statuses_markers_translated[item.status]}\n" \
                               f"{a2} {int(item.occupancy)} {a4} {int(item.capacity)}\n" \
                               f"{a3} {int(item.capacity) - int(item.occupancy)}"

                data_text = {'text': build_result}
                reciklomats_list.append(data_text)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤
        return jsonify({'result': reciklomats_list})
    else:
        # –ï—Å–ª–∏ –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç
        return not_found(
            _l("–í–∞—à –≤–∏—à–ª–∏—Å—Ç –µ—â—ë –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç–µ –≤ –Ω–µ–≥–æ —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç—ã - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /wishlist"))


@app.route('/user/register', methods=['POST'])
def reciklomat_register_new_user():
    payload = request.get_json() or request.form

    try:
        user = user_repo.get_or_create_user(**payload)
        logging.info(f"User registered or updated: {user}")
        return jsonify({'result': _l(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤ –≤ –ë–µ–ª–≥—Ä–∞–¥–µ (–°–µ—Ä–±–∏—è).\n\n–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - –∫–æ–º–∞–Ω–¥–∞ /all\n\n–ê –µ—â—ë –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–π –≤–∏—à–ª–∏—Å—Ç —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å. –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤ –≤ –≤–∞—à–µ–º –≤–∏—à–ª–∏—Å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è - –≤—ã —Ç—É—Ç –∂–µ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏—à–ª–∏—Å—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wishlist\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤ –≤ –≤–∏—à–ª–∏—Å—Ç–µ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /check\n\n–î—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤ –º–µ–Ω—é")})

    except Exception as e:
        logging.error(f"Error in user registration: {e}")
        return 'error', 500


@app.route('/user/status', methods=['POST'])
def reciklomat_user_status():
    data = request.get_json() or request.form

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ userId –≤ –¥–∞–Ω–Ω—ã—Ö
    if 'telegram_id' not in data:
        return bad_request('–ü–æ–ª–µ telegram_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    current_usr = user_repo.get_by_telegram_id(data['telegram_id'])
    if not current_usr:
        return not_found('–ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ—Ç—É, —á—Ç–æ–±—ã –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª –≤–∞—Å')

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
    record_a_visit(current_usr)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if current_usr.is_telegram_on:
        return jsonify({'result': _l(
            "–°–µ–π—á–∞—Å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –≤–∞—à–∏—Ö —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞.\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è")})
    else:
        return jsonify({'result': _l(
            "–°–µ–π—á–∞—Å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –≤–∞—à–∏—Ö —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n–í—ã –ù–ï –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è")})


@app.route('/user/switch/<switch_type>', methods=['POST'])
def user_status_switch(switch_type):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –≤—Ä—É—á–Ω—É—é
    babel.locale_selector_func = get_locale

    data = request.get_json() or request.form

    if 'telegram_id' not in data:
        return bad_request('–ü–æ–ª–µ telegram_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')

    current_usr = user_repo.get_by_telegram_id(data['telegram_id'])
    if not current_usr:
        return not_found('–ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ—Ç—É, —á—Ç–æ–±—ã –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª –≤–∞—Å')

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
    record_a_visit(current_usr)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if switch_type == "off":
        user_repo.update_subscription_status(current_usr.id, False)
        return jsonify(
            {'result': _l("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–∞—à–∏—Ö —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –≤ –≤–∏—à–ª–∏—Å—Ç–µ)")})
    else:
        user_repo.update_subscription_status(current_usr.id, True)
        return jsonify(
            {'result': _l("–í—ã –≤–∫–ª—é—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–∞—à–∏—Ö —Ä–µ—Ü–∏–∫–ª–æ–º–∞—Ç–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –≤ –≤–∏—à–ª–∏—Å—Ç–µ)")})


@app.route('/help', methods=['POST'])
def help():
    payload = request.get_json() or request.form
    check_user = user_repo.get_by_telegram_id(payload['telegram_id'])
    if check_user:
        return not_found(
            _l("–ü–æ–∂–µ–ª–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - @German_goncharov\n\nP.S. –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ, –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ <a href='https://github.com/zak427zak/reciklomat_checker_telegram_bot'>–Ω–∞ GitHub</a>"))
    else:
        return not_found(_l("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ!"))


@app.route('/user/language', methods=['POST'])
def user_set_language():
    payload = request.get_json() or request.form
    check_user = user_repo.get_by_telegram_id(payload['telegram_id'])

    if check_user:
        user_repo.update_language(check_user.id, payload['language'])
        record_a_visit(check_user)
        # login_user(check_user, True)
        return jsonify({'result': _l("–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")})
    else:
        return not_found('–ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ—Ç—É, —á—Ç–æ–±—ã –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª –≤–∞—Å')


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@app.route('/user/subscribe', methods=['POST'])
def subscribe_user():
    payload = request.get_json() or request.form
    check_user = user_repo.get_by_telegram_id(payload['telegram_id'])
    if check_user:
        record_a_visit(check_user)
        subscription_repo.add_or_remove_subscription(check_user.id, payload['address'])
        return 'ok'
    else:
        return not_found("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
def record_a_visit(user):
    user_repo.update_last_seen(user.id)


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8000)
